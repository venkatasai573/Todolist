{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","input","result","handleChange","e","_this","setState","target","value","handleDelete","g","newArray","filter","_input","index","ElementA","push","_this2","this","react_default","a","createElement","type","placeholder","onChange","onClick","map","key","href","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA0CeA,oNAvCbC,MAAM,CACAC,MAAM,GACNC,OAAO,MAEbC,aAAa,SAACC,GACZC,EAAKC,SAAS,CAACJ,OAAOE,EAAEG,OAAOC,WAEjCC,aAAa,SAACC,GACZ,IAAIC,EAASN,EAAKL,MAAMC,MAAMW,OAAO,SAACC,EAAOC,GAC3C,GAAGA,IAAQJ,EACT,OAAOG,IAGXR,EAAKC,SAAS,CAACL,MAAMU,OAEvBI,SAAS,SAACX,GACR,GAAuB,KAApBC,EAAKL,MAAME,OAAY,CACzB,IAAIS,EAASN,EAAKL,MAAMC,MACxBU,EAASK,KAAKX,EAAKL,MAAME,QAC1BG,EAAKC,SAAS,CAACL,MAAMU,8EAGd,IAAAM,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAOC,YAAY,kBAAkBC,SAAUN,KAAKf,eAChEgB,EAAAC,EAAAC,cAAA,UAAQI,QAASP,KAAKH,UAAUI,EAAAC,EAAAC,cAAA,0BAE9BH,KAAKlB,MAAMC,MAAMyB,IAAI,SAAChB,EAAEI,GACxB,OAAOK,EAAAC,EAAAC,cAAA,MAAIM,IAAKb,GAAQJ,EACxBS,EAAAC,EAAAC,cAAA,KAAGO,KAAK,IAAIH,QAASR,EAAKR,aAAaoB,KAAKZ,EAAKH,IAAjD,uBAhCQgB,cCUEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bd979691.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nclass App extends Component {\n  state={\n        input:[],\n        result:\"\"\n    }\n  handleChange=(e)=>{\n    this.setState({result:e.target.value})\n  }\n  handleDelete=(g)=>{\n    let newArray=this.state.input.filter((_input,index)=>{\n      if(index!==g){\n        return _input\n      }\n    });\n    this.setState({input:newArray});\n  }\n  ElementA=(e)=>{\n    if(this.state.result!==\"\"){\n     let newArray=this.state.input;\n     newArray.push(this.state.result);\n    this.setState({input:newArray})\n  }\n     }\n  render() {\n    return (\n      <div>\n        <h1>Todo List</h1>\n        <input type=\"text\" placeholder=\"Enter Task Name\" onChange={this.handleChange}/>\n        <button onClick={this.ElementA}><p>Add To Tasks</p></button>\n        {\n          this.state.input.map((g,index)=>{\n          return <h3 key={index}>{g}\n          <a href=\"#\" onClick={this.handleDelete.bind(this,index)}>[Delete]</a>\n          </h3>\n          })\n          }\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}